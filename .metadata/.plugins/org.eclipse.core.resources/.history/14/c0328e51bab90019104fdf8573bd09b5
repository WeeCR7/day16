package cn.bgi.controller;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import cn.bgi.pojo.DataResult;
import cn.bgi.pojo.Pagination;
import cn.bgi.pojo.User;
import cn.bgi.pojo.UserCheck;
import cn.bgi.pojo.UserInfo;
import cn.bgi.service.UserService;

@RestController
@RequestMapping("/user")
public class UserController {
	@Resource
	private UserService userService;
	// 实现登录֤
	@RequestMapping(value = "/login", method = RequestMethod.POST)
	public DataResult<UserCheck> checklogin(String username, String password, HttpServletRequest request,
			HttpSession session) {
		UserCheck uc = new UserCheck();
		User user = userService.findUser(username, password);
		if (user != null) {
			uc.setResult(true);
			uc.setAut(user.getAuthority());// 根据权限判断是超级管理员还是普通管理员
			session.setAttribute("username", user.getUsername());
			session.setAttribute("u_id", user.getU_id());
		}
		List<UserCheck> list = new ArrayList<UserCheck>();
		list.add(uc);
		return new DataResult<UserCheck>(list.size(), list);
	}

	@RequestMapping(value = "/findUserInfo", method = RequestMethod.GET)
	// 查询用户信息
	public DataResult<Object> find(String name, Integer page, Integer rows) {
		if (name != null) {
			List<Object> list = userService.findUserInfo(name);
			return new DataResult<Object>(list.size(), list);
		} else {
			Pagination pagination = new Pagination();
			pagination.setPage(page);
			pagination.setRows(rows);
			List<Object> userInfoList = userService.findUserInfoByPage(pagination.getStart(), rows);
			return new DataResult<Object>(userService.findAllUserInfo(), userInfoList);
		}
	}

	// 查入用户信息
	@RequestMapping(value = "/insertUser", method = RequestMethod.POST)
	public void insert(User user, HttpServletResponse response) throws IOException {
		boolean result = false;
		if (userService.findUserByUserName(user.getUsername()) == null) {
			result = true;
		}
		if (result) {
			userService.insertUser(user);
		}
		response.getWriter().write("" + result);
	}

	// 删除用户信息
	@RequestMapping("/deleteUser")
	public int delete(Integer id) {
		return userService.deleteUser(id);
	}

	// 实现上传
	public String upload(MultipartFile photo,HttpServletRequest request) throws IllegalStateException, IOException {
		String basePath = request.getScheme() + "://" + request.getServerName() + ":" + request.getServerPort() + request.getContextPath();
		// 头像上传的地址
		String filePath = "d:/upload";
		// 获取上传文件的文件名
		String originalFilename = photo.getOriginalFilename();
		// 随机分配给上传图片新的文件名
		String newFileName = UUID.randomUUID() + originalFilename;
		String fileServerPath = basePath + "/uploadFiles/**".substring(0, "/uploadFiles/**".lastIndexOf("/") + 1) + originalFilename;
		// 保存文件到指定目录下
		File targetFile = new File(filePath, newFileName);
		// 判断文件夹是否存在，不存在则重新创建
		if (!targetFile.exists()) {
			targetFile.mkdirs();
		}
		photo.transferTo(targetFile);
		return newFileName;
	}

	// 插入用户信息
	@RequestMapping(value = "/insertUserInfo", method = RequestMethod.POST)
	public int insertInfo(String name, String sex, String e_mail, MultipartFile photo, HttpServletRequest request,
			HttpSession session) throws IllegalStateException, IOException {
		UserInfo userInfo = new UserInfo();
		Integer u_id = (Integer) session.getAttribute("u_id");
		userInfo.setU_id(u_id);
		userInfo.setName(name);
		userInfo.setSex(sex);
		userInfo.setE_mail(e_mail);
		userInfo.setPhoto(upload(photo));
		return userService.insertUserInfo(userInfo);
	}

	// 查询用户个人信息
	@RequestMapping("/personInfo")
	public DataResult<UserInfo> findPersonInfo(HttpSession session) {
		Integer u_id = (Integer) session.getAttribute("u_id");
		UserInfo userInfo = userService.findPersonInfoById(u_id);
		List<UserInfo> userInfoList = new ArrayList<UserInfo>();
		userInfoList.add(userInfo);
		return new DataResult<UserInfo>(userInfoList.size(), userInfoList);
	}

	// 更新用户个人信息
	@RequestMapping(value = "/updatePersonInfo", method = RequestMethod.POST)
	public int updatePersonInfo(String name, String sex, String e_mail, MultipartFile photo, HttpSession session)
			throws IllegalStateException, IOException {
		UserInfo userInfo = new UserInfo();
		Integer u_id = (Integer) session.getAttribute("u_id");
		userInfo.setU_id(u_id);
		userInfo.setName(name);
		userInfo.setSex(sex);
		userInfo.setE_mail(e_mail);
		userInfo.setPhoto(upload(photo));
		return userService.updateUserInfo(userInfo);
	}

	// 修改密码
	@RequestMapping("/updatePwd")
	public boolean updatePwd(User user) {
		boolean result = true;
		if (userService.countUserIdByName(user.getUsername()) > 0) {
			result = false;
		}
		if (result) {
			userService.updatePWD(user);
		}
		return result;
	}

}
